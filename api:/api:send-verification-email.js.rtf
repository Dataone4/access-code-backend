{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ Resend \} from 'resend';\
import dotenv from 'dotenv';\
\
dotenv.config();\
\
const resend = new Resend(process.env.RESEND_API_KEY);\
\
export default async function handler(req, res) \{\
  if (req.method !== 'POST') \{\
    return res.status(405).json(\{ error: 'Method not allowed' \});\
  \}\
\
  const \{ email \} = req.body;\
  if (!email) \{\
    return res.status(400).json(\{ success: false, error: 'Email is required' \});\
  \}\
\
  try \{\
    // Generate a random 6-digit verification code\
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\
\
    // Send email using Resend\
    await resend.emails.send(\{\
      from: 'Secure Access <noreply@yourdomain.com>',\
      to: [email],\
      subject: 'Your Verification Code',\
      text: `Your verification code is: $\{verificationCode\}`,\
    \});\
\
    // Save the code for later verification (e.g., in-memory or database)\
    // Here, we'll use a simple in-memory object for demonstration purposes\
    global.verificationCodes = global.verificationCodes || \{\};\
    global.verificationCodes[email] = verificationCode;\
\
    res.status(200).json(\{ success: true \});\
  \} catch (error) \{\
    console.error('Error sending email:', error);\
    res.status(500).json(\{ success: false, error: 'Failed to send verification email' \});\
  \}\
\}\
}